
@page "/counter"
@using TestWithBasicAuth.Auth
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Counter</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>Welcome, authenticated user!</p>
    </Authorized>
    <NotAuthorized>
        <p>Please log in to access this content.</p>
    </NotAuthorized>
</AuthorizeView>


<h1>Counter</h1>
<h2>Token: @access</h2>
<h2>Refresh: @refresh</h2>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-secondary" @onclick="CheckToken">Check Saved Token</button>

<h2>Saved AccesToken:   @savedAccessTokenMessage</h2>
<h2>Saved RefreshToken: @savedRefreshTokenMessage</h2>

@code {
    private int currentCount = 0;
    private string access = string.Empty;
    private string refresh = string.Empty;
    private string savedRefreshTokenMessage = string.Empty;
    private string savedAccessTokenMessage = string.Empty;

    private async Task IncrementCount()
    {
        try
        {
            var  data = new LoginDto("Kalle5", "ABC123" );
            var response = await Http.PostAsJsonAsync("https://localhost:7044/api/auth/login", data);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TokenDto>();
                if (result != null)
                {
                    access = result.AccessToken;
                    refresh = result.RefreshToken;

                    // Save the tokens to local storage
                    await LocalStorage.SetItemAsync("accessToken", access);
                    await LocalStorage.SetItemAsync("refreshToken", refresh);

                    var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                    authStateProvider.NotifyUserAuthentication(access);
                }
            }
            else
            {
                access = "Failed to retrieve token.";
                refresh = "Check credentials.";
            }

            currentCount++;
        }
        catch (Exception ex)
        {
            access = $"Error: {ex.Message}";
            refresh = "Error occurred while fetching tokens.";
        }

        StateHasChanged();
    }

    private async Task CheckToken()
    {
        var savedAccessToken = await LocalStorage.GetItemAsync<string>("accessToken");
        var savedRefreshToken = await LocalStorage.GetItemAsync<string>("refreshToken");

        savedAccessTokenMessage = string.IsNullOrEmpty(savedAccessToken)
            ? "No token saved."
            : $" {savedAccessToken}"; 
        savedRefreshTokenMessage = string.IsNullOrEmpty(savedRefreshToken)
            ? "No token saved."
             : $" {savedRefreshToken}";
    }

    private record LoginDto(string UserName, string Password);
    private record TokenDto(string AccessToken, string RefreshToken);
}
